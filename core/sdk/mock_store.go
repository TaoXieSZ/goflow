// Code generated by MockGen. DO NOT EDIT.
// Source: core/sdk/types.go

// Package mock_sdk is a generated GoMock package.
package mock_sdk

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sdk "github.com/s8sg/goflow/core/sdk"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// Cleanup mocks base method.
func (m *MockDataStore) Cleanup() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cleanup")
	ret0, _ := ret[0].(error)
	return ret0
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockDataStoreMockRecorder) Cleanup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockDataStore)(nil).Cleanup))
}

// Configure mocks base method.
func (m *MockDataStore) Configure(flowName, requestId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Configure", flowName, requestId)
}

// Configure indicates an expected call of Configure.
func (mr *MockDataStoreMockRecorder) Configure(flowName, requestId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockDataStore)(nil).Configure), flowName, requestId)
}

// CopyStore mocks base method.
func (m *MockDataStore) CopyStore() (sdk.DataStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyStore")
	ret0, _ := ret[0].(sdk.DataStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyStore indicates an expected call of CopyStore.
func (mr *MockDataStoreMockRecorder) CopyStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyStore", reflect.TypeOf((*MockDataStore)(nil).CopyStore))
}

// Del mocks base method.
func (m *MockDataStore) Del(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockDataStoreMockRecorder) Del(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockDataStore)(nil).Del), key)
}

// Get mocks base method.
func (m *MockDataStore) Get(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDataStoreMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDataStore)(nil).Get), key)
}

// Init mocks base method.
func (m *MockDataStore) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockDataStoreMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockDataStore)(nil).Init))
}

// Set mocks base method.
func (m *MockDataStore) Set(key string, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockDataStoreMockRecorder) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockDataStore)(nil).Set), key, value)
}

// MockStateStore is a mock of StateStore interface.
type MockStateStore struct {
	ctrl     *gomock.Controller
	recorder *MockStateStoreMockRecorder
}

// MockStateStoreMockRecorder is the mock recorder for MockStateStore.
type MockStateStoreMockRecorder struct {
	mock *MockStateStore
}

// NewMockStateStore creates a new mock instance.
func NewMockStateStore(ctrl *gomock.Controller) *MockStateStore {
	mock := &MockStateStore{ctrl: ctrl}
	mock.recorder = &MockStateStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateStore) EXPECT() *MockStateStoreMockRecorder {
	return m.recorder
}

// Cleanup mocks base method.
func (m *MockStateStore) Cleanup() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cleanup")
	ret0, _ := ret[0].(error)
	return ret0
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockStateStoreMockRecorder) Cleanup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockStateStore)(nil).Cleanup))
}

// Configure mocks base method.
func (m *MockStateStore) Configure(flowName, requestId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Configure", flowName, requestId)
}

// Configure indicates an expected call of Configure.
func (mr *MockStateStoreMockRecorder) Configure(flowName, requestId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockStateStore)(nil).Configure), flowName, requestId)
}

// CopyStore mocks base method.
func (m *MockStateStore) CopyStore() (sdk.StateStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyStore")
	ret0, _ := ret[0].(sdk.StateStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyStore indicates an expected call of CopyStore.
func (mr *MockStateStoreMockRecorder) CopyStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyStore", reflect.TypeOf((*MockStateStore)(nil).CopyStore))
}

// Get mocks base method.
func (m *MockStateStore) Get(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStateStoreMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStateStore)(nil).Get), key)
}

// Init mocks base method.
func (m *MockStateStore) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockStateStoreMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockStateStore)(nil).Init))
}

// Set mocks base method.
func (m *MockStateStore) Set(key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockStateStoreMockRecorder) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStateStore)(nil).Set), key, value)
}

// Update mocks base method.
func (m *MockStateStore) Update(key, oldValue, newValue string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", key, oldValue, newValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockStateStoreMockRecorder) Update(key, oldValue, newValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStateStore)(nil).Update), key, oldValue, newValue)
}

// MockEventHandler is a mock of EventHandler interface.
type MockEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEventHandlerMockRecorder
}

// MockEventHandlerMockRecorder is the mock recorder for MockEventHandler.
type MockEventHandlerMockRecorder struct {
	mock *MockEventHandler
}

// NewMockEventHandler creates a new mock instance.
func NewMockEventHandler(ctrl *gomock.Controller) *MockEventHandler {
	mock := &MockEventHandler{ctrl: ctrl}
	mock.recorder = &MockEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventHandler) EXPECT() *MockEventHandlerMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *MockEventHandler) Configure(flowName, requestId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Configure", flowName, requestId)
}

// Configure indicates an expected call of Configure.
func (mr *MockEventHandlerMockRecorder) Configure(flowName, requestId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockEventHandler)(nil).Configure), flowName, requestId)
}

// Flush mocks base method.
func (m *MockEventHandler) Flush() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Flush")
}

// Flush indicates an expected call of Flush.
func (mr *MockEventHandlerMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockEventHandler)(nil).Flush))
}

// Init mocks base method.
func (m *MockEventHandler) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockEventHandlerMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockEventHandler)(nil).Init))
}

// ReportExecutionContinuation mocks base method.
func (m *MockEventHandler) ReportExecutionContinuation(requestId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportExecutionContinuation", requestId)
}

// ReportExecutionContinuation indicates an expected call of ReportExecutionContinuation.
func (mr *MockEventHandlerMockRecorder) ReportExecutionContinuation(requestId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportExecutionContinuation", reflect.TypeOf((*MockEventHandler)(nil).ReportExecutionContinuation), requestId)
}

// ReportExecutionForward mocks base method.
func (m *MockEventHandler) ReportExecutionForward(nodeId, requestId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportExecutionForward", nodeId, requestId)
}

// ReportExecutionForward indicates an expected call of ReportExecutionForward.
func (mr *MockEventHandlerMockRecorder) ReportExecutionForward(nodeId, requestId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportExecutionForward", reflect.TypeOf((*MockEventHandler)(nil).ReportExecutionForward), nodeId, requestId)
}

// ReportNodeEnd mocks base method.
func (m *MockEventHandler) ReportNodeEnd(nodeId, requestId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportNodeEnd", nodeId, requestId)
}

// ReportNodeEnd indicates an expected call of ReportNodeEnd.
func (mr *MockEventHandlerMockRecorder) ReportNodeEnd(nodeId, requestId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportNodeEnd", reflect.TypeOf((*MockEventHandler)(nil).ReportNodeEnd), nodeId, requestId)
}

// ReportNodeFailure mocks base method.
func (m *MockEventHandler) ReportNodeFailure(nodeId, requestId string, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportNodeFailure", nodeId, requestId, err)
}

// ReportNodeFailure indicates an expected call of ReportNodeFailure.
func (mr *MockEventHandlerMockRecorder) ReportNodeFailure(nodeId, requestId, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportNodeFailure", reflect.TypeOf((*MockEventHandler)(nil).ReportNodeFailure), nodeId, requestId, err)
}

// ReportNodeStart mocks base method.
func (m *MockEventHandler) ReportNodeStart(nodeId, requestId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportNodeStart", nodeId, requestId)
}

// ReportNodeStart indicates an expected call of ReportNodeStart.
func (mr *MockEventHandlerMockRecorder) ReportNodeStart(nodeId, requestId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportNodeStart", reflect.TypeOf((*MockEventHandler)(nil).ReportNodeStart), nodeId, requestId)
}

// ReportOperationEnd mocks base method.
func (m *MockEventHandler) ReportOperationEnd(operationId, nodeId, requestId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportOperationEnd", operationId, nodeId, requestId)
}

// ReportOperationEnd indicates an expected call of ReportOperationEnd.
func (mr *MockEventHandlerMockRecorder) ReportOperationEnd(operationId, nodeId, requestId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportOperationEnd", reflect.TypeOf((*MockEventHandler)(nil).ReportOperationEnd), operationId, nodeId, requestId)
}

// ReportOperationFailure mocks base method.
func (m *MockEventHandler) ReportOperationFailure(operationId, nodeId, requestId string, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportOperationFailure", operationId, nodeId, requestId, err)
}

// ReportOperationFailure indicates an expected call of ReportOperationFailure.
func (mr *MockEventHandlerMockRecorder) ReportOperationFailure(operationId, nodeId, requestId, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportOperationFailure", reflect.TypeOf((*MockEventHandler)(nil).ReportOperationFailure), operationId, nodeId, requestId, err)
}

// ReportOperationStart mocks base method.
func (m *MockEventHandler) ReportOperationStart(operationId, nodeId, requestId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportOperationStart", operationId, nodeId, requestId)
}

// ReportOperationStart indicates an expected call of ReportOperationStart.
func (mr *MockEventHandlerMockRecorder) ReportOperationStart(operationId, nodeId, requestId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportOperationStart", reflect.TypeOf((*MockEventHandler)(nil).ReportOperationStart), operationId, nodeId, requestId)
}

// ReportRequestEnd mocks base method.
func (m *MockEventHandler) ReportRequestEnd(requestId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportRequestEnd", requestId)
}

// ReportRequestEnd indicates an expected call of ReportRequestEnd.
func (mr *MockEventHandlerMockRecorder) ReportRequestEnd(requestId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportRequestEnd", reflect.TypeOf((*MockEventHandler)(nil).ReportRequestEnd), requestId)
}

// ReportRequestFailure mocks base method.
func (m *MockEventHandler) ReportRequestFailure(requestId string, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportRequestFailure", requestId, err)
}

// ReportRequestFailure indicates an expected call of ReportRequestFailure.
func (mr *MockEventHandlerMockRecorder) ReportRequestFailure(requestId, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportRequestFailure", reflect.TypeOf((*MockEventHandler)(nil).ReportRequestFailure), requestId, err)
}

// ReportRequestStart mocks base method.
func (m *MockEventHandler) ReportRequestStart(requestId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportRequestStart", requestId)
}

// ReportRequestStart indicates an expected call of ReportRequestStart.
func (mr *MockEventHandlerMockRecorder) ReportRequestStart(requestId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportRequestStart", reflect.TypeOf((*MockEventHandler)(nil).ReportRequestStart), requestId)
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *MockLogger) Configure(flowName, requestId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Configure", flowName, requestId)
}

// Configure indicates an expected call of Configure.
func (mr *MockLoggerMockRecorder) Configure(flowName, requestId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockLogger)(nil).Configure), flowName, requestId)
}

// Init mocks base method.
func (m *MockLogger) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockLoggerMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockLogger)(nil).Init))
}

// Log mocks base method.
func (m *MockLogger) Log(str string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Log", str)
}

// Log indicates an expected call of Log.
func (mr *MockLoggerMockRecorder) Log(str interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockLogger)(nil).Log), str)
}
